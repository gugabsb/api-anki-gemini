---
layout: "layouts/base.njk"
pagination:
  data: decks.items
  size: 1
  alias: deckid
  resolve: values
  filter:
    - item
permalink: "/comprar/{{ deckid.sys.id }}/"
---

{# Filtro para encontrar o deck pelo ID #}
{% set currentDeck = deckid %}

{% if currentDeck %}
<div class="deck-container">
    <div class="col1">
      {% if currentDeck.fields.image %}
      <img src="{{ currentDeck.fields.image.fields.file.url }}" 
           alt="{{ currentDeck.fields.title }}"
           class="image"/>
      {% endif %}
    </div>  

    <div class="col2">
      <h2  class="title">{{ currentDeck.fields.title }}</h2>
      <ul class="icon-list">
        <li>
          <b>Material focado na prova</b><br>
          Elaborado com as questões anteriores da banca e alinhada com o conteúdo programático do cargo.
        </li>
        <li>          
        <b>Método eficiente de estudo </b><br>
        O método anki baseia-se na repetição espaçada, ou seja, na revisão do mesmo conteúdo em intervalos de tempo. 
        </li>
        <li>
        <b>Atualização até a prova</b><br>
        Até o dia da sua prova você terá acesso às atualizações dos Decks gratuitamente.
        </li>
      <ul>
    </div>
    
    <div class="col3">
      <p class="price">R$ {{ currentDeck.fields.price }},00</p>
      <button id="buy-button" class="buy-button">
        Comprar com PIX
      </button>
      <div id="qrcodepix" class="qrcodepix"></div>
    </div>
</div>

<div id="pix-payment" class="pix-payment-container" style="display:none;">
  <h3>Pagamento via PIX</h3>
  <div class="pix-instructions">
    <p>Escaneie o QR Code acima ou copie o código abaixo para pagar:</p>
  </div>
  <div class="pix-code-container">
    <div id="pix-code" class="pix-code"></div>
    <button class="copy-btn" title="Copiar código PIX">
      <svg class="copy-icon" viewBox="0 0 24 24">
        <path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" />
      </svg>
    </button>
  </div>
  <p class="pix-instructions">Após o pagamento, seu acesso ao Deck será liberado automaticamente aqui e na Área do Aluno.</p>
</div>

<div class="conteudo">
  <h3>Conteúdo do Deck</h3>
  <div class="desc" id="deck-desc" data-markdown="{{ currentDeck.fields.description | escape }}"></div>
</div>

<style>
/* Adicione esses estilos */
.pix-payment-container {
	margin-top: 20px;
	padding: 15px;
	background: var(--cinza-claro);
	border-radius: 5px;
	border: 1px solid var(--cinza-claro);
}
.pix-payment-container h3 {
  color: var(--texto-preto);
}

.pix-code-container {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 15px;
  padding: 12px;
  background: var(--cinza-muito-escuro);
  border-radius: 5px;
  border: 1px solid #ddd;
}

.pix-code {
  flex-grow: 1;
  font-family: monospace;
  word-break: break-all;
  padding: 8px;
  color: var(--texto-branco);
}

.copy-btn {
  background: none;
  border: none;
  cursor: pointer;
  color: var(--texto-cinza);
  transition: color 0.2s;
}

.copy-btn:hover {
  color: var(--verde-ok);
}

.copy-icon {
  width: 20px;
  height: 20px;
}

.pix-instructions {
  margin-top: 10px;
  font-size: 14px;
  color: var(--texto-preto);
}



  /* Estilos para o conteúdo Markdown renderizado */
.desc {
  line-height: 1.6;
  color: var(--texto-cinza);
}

.desc h1, .desc h2, .desc h3, .desc h4 {
  font-size: 1rem;
  margin-bottom: 0.5em;
  color: var(--texto-branco);
}

.desc li {
  margin-bottom: 0.5em;
  list-style-type: square;
}

.desc strong {
  font-weight: bold;
}

.desc em {
  font-style: italic;
}

.desc code {
  background-color: #f5f5f5;
  padding: 0.2em 0.4em;
  border-radius: 3px;
  font-family: monospace;
}

.desc pre {
  background-color: #f5f5f5;
  padding: 1em;
  border-radius: 3px;
  overflow-x: auto;
}

.desc blockquote {
  border-left: 4px solid #ddd;
  padding-left: 1em;
  color: #666;
  margin-left: 0;
}
</style>  

<script>
  document.addEventListener('DOMContentLoaded', function() {
  const descElement = document.getElementById('deck-desc');
  if (descElement) {
    try {
      const rawMarkdown = descElement.getAttribute('data-markdown');
      const unsafeHtml = marked.parse(rawMarkdown);
      descElement.innerHTML = DOMPurify.sanitize(unsafeHtml);
    } catch (e) {
      console.error('Erro ao renderizar markdown:', e);
      descElement.innerHTML = '<p>Conteúdo não disponível</p>';
    }
  }
});

async function downloadDeck(deckId) {
    try {
      const supabase = window.supabaseClient.init();
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error || !session) throw new Error('Sessão inválida');

      const response = await fetch(`/.netlify/functions/download/${deckId}`, {
        headers: {
          'Authorization': `Bearer ${session.access_token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok && response.redirected) {
        window.location.href = response.url;
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Falha no download');
      }
    } catch (error) {
      console.error('Erro no download:', error);
      alert(error.message);
    }
  }

(async function() {
  const supabase = window.supabaseClient.init();
  const { data: { user }, error } = await supabase.auth.getUser();
  const deck_id = '{{ currentDeck.sys.id }}';
  const deck_price = '{{ currentDeck.fields.price }}';
  const deck_name = '{{ currentDeck.fields.title }}';
  const buyButton = document.getElementById('buy-button');
  let paymentCheckInterval = null;

  async function checkDeckOwnership() {
    try {
      if (user && !error) {
        const { data: result } = await supabase
          .from('user_decks')
          .select('deck_id')
          .eq('user_id', user.id)
          .eq('deck_id', deck_id);
        return result && result.length > 0;
      }else{
        return false;
      }
    } catch (e) {
      console.error('Erro ao verificar deck:', e);
      return false;
    }
  }

  function setupDownloadButton() {
    buyButton.textContent = "Download";
    buyButton.className = "btn-download";
    buyButton.removeEventListener("click", handleBuyClick);
    buyButton.addEventListener('click', () => downloadDeck(deck_id));
  }

  const hasDeck = await checkDeckOwnership();
  if (hasDeck) {
    setupDownloadButton();
    return;
  }

  async function handleBuyClick() {
    try {
      if (!user || error) {
        const returnTo = encodeURIComponent(window.location.pathname);
        window.location.href = `/auth/login/?redirect=${returnTo}`;
        return;
      }
      const user_id = user.id;
      const user_email = user.email;

      // Gera o QR Code PIX
      const res = await fetch('/.netlify/functions/create-pix-payment-mp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ deck_id, deck_price, deck_name, user_id, user_email })
      });

      const text = await res.text();
      const data = JSON.parse(text);

      // Exibe QR Code
      const qrContainer = document.getElementById('qrcodepix');
      qrContainer.innerHTML = '';
      const img = document.createElement('img');
      img.src = `data:image/png;base64,${data.qr_code_base64}`;
      img.alt = "QR Code para pagamento PIX";
      qrContainer.appendChild(img);

      // Exibe código PIX
      const codeContainer = document.getElementById('pix-code');
      codeContainer.textContent = data.qr_code;
      document.getElementById('pix-payment').style.display = 'block';
      document.querySelector('.copy-btn').addEventListener('click', () => {
        navigator.clipboard.writeText(data.qr_code)
          .then(() => {
            const btn = document.querySelector('.copy-btn');
            btn.innerHTML = '<svg class="copy-icon" viewBox="0 0 24 24"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" /></svg>';
            btn.setAttribute('title', 'Código copiado!');
            
            setTimeout(() => {
              btn.innerHTML = '<svg class="copy-icon" viewBox="0 0 24 24"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>';
              btn.setAttribute('title', 'Copiar código PIX');
            }, 2000);
          })
          .catch(err => {
            console.error('Erro ao copiar:', err);
            alert('Não foi possível copiar o código. Tente manualmente.');
          });
      });
      document.getElementById('pix-payment').scrollIntoView({ behavior: 'smooth' });
      startPaymentChecking();
    } catch (err) {
      console.error('Erro ao criar pagamento:', err);
      alert('Erro ao gerar QR Code de pagamento.');
    }
  }
  function startPaymentChecking() {
    if (paymentCheckInterval) {
      clearInterval(paymentCheckInterval);
    }
    paymentCheckInterval = setInterval(async () => {
      const hasDeck = await checkDeckOwnership();
      if (hasDeck) {
        setupDownloadButton();
        clearInterval(paymentCheckInterval);
      }
    }, 5000);

    setTimeout(() => {
      if (paymentCheckInterval) {
        clearInterval(paymentCheckInterval);
        console.log('Tempo máximo de verificação expirado');
      }
    }, 1800000);
  }
  buyButton.addEventListener('click', handleBuyClick);
})();
</script>

{% else %}
  <div class="error">
    <p>Deck não encontrado</p>
    <a href="/">Voltar</a>
  </div>
{% endif %}