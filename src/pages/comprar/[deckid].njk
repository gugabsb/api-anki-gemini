---
layout: "layouts/base.njk"
pagination:
  data: decks.items
  size: 1
  alias: deckid
  resolve: values
  filter:
    - item
permalink: "/comprar/{{ deckid.sys.id }}/"
---

{# Filtro para encontrar o deck pelo ID #}
{% set currentDeck = deckid %}

{% if currentDeck %}
<div class="deck-container">
    <div class="col1">
      {% if currentDeck.fields.image %}
      <img src="{{ currentDeck.fields.image.fields.file.url }}" 
           alt="{{ currentDeck.fields.title }}"
           class="image"/>
      {% endif %}
    </div>  

    <div class="col2">
      <h2  class="title">{{ currentDeck.fields.title }}</h2>
      <ul class="icon-list">
        <li>
          <b>Material focado na na sua prova</b><br>
          Elaborado com as questões anteriores da banca e alinhada com o conteúdo programático do cargo.
        </li>
        <li>          
        <b>Material Digital</b><br>
        Não se limite a sua mesa de estudos! Estude do seu jeito, em qualquer lugar e a qualquer hora.
        </li>
        <li>
        <b>Atualização até a data da prova</b><br>
        Até o dia da sua prova você terá acesso às atualizações dos Decks gratuitamente.
        </li>
      <ul>
  
    </div>
    
    <div class="col3">
      <p class="price">R$ {{ currentDeck.fields.price }}</p>
      <button id="buy-button" class="buy-button">
        Comprar com PIX
      </button><br>
      <div id="qrcodepix" class="qrcodepix"></div>
    </div>

</div>


<div class="conteudo">
  <h3>Conteúdo do Deck</h3>
  <div class="desc">{{ currentDeck.fields.description }}</div>
</div>  
<script>
// Função de download melhorada
async function downloadDeck(deckId) {
    try {
      const supabase = window.supabaseClient.init();
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error || !session) throw new Error('Sessão inválida');

      const response = await fetch(`/.netlify/functions/download/${deckId}`, {
        headers: {
          'Authorization': `Bearer ${session.access_token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok && response.redirected) {
        window.location.href = response.url;
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Falha no download');
      }
    } catch (error) {
      console.error('Erro no download:', error);
      alert(error.message);
    }
  }



(async function() {
  const supabase = window.supabaseClient.init();
  const { data: { user }, error } = await supabase.auth.getUser();
  if (!user || error) {
    const returnTo = encodeURIComponent(window.location.pathname);
    window.location.href = `/auth/login/?redirect=${returnTo}`;
    return;
  }

  const user_id = user.id;
  const user_email = user.email;
  const deck_id = '{{ currentDeck.sys.id }}';
  const deck_price = '{{ currentDeck.fields.price }}';
  const deck_name = '{{ currentDeck.fields.title }}';
  const buyButton = document.getElementById('buy-button');
  let paymentCheckInterval = null;

  // Função para verificar se o usuário já possui o deck
  async function checkDeckOwnership() {
    try {
      const { data: result } = await supabase
        .from('user_decks')
        .select('deck_id')
        .eq('user_id', user_id)
        .eq('deck_id', deck_id);

      return result && result.length > 0;
    } catch (e) {
      console.error('Erro ao verificar deck:', e);
      return false;
    }
  }

  // Função para transformar o botão em download
  function setupDownloadButton() {
    buyButton.textContent = "Download";
    buyButton.className = "btn-download";
    buyButton.removeEventListener("click", handleBuyClick);
    buyButton.addEventListener('click', () => downloadDeck(deck_id));
  }

  // Verificação inicial (quando a página carrega)
  const hasDeck = await checkDeckOwnership();
  if (hasDeck) {
    setupDownloadButton();
    return; // Sai da função se o usuário já tem o deck
  }

  // Função de compra (só executa se o usuário não tiver o deck)
  async function handleBuyClick() {
    try {
      // Gera o QR Code PIX
      const res = await fetch('/.netlify/functions/create-pix-payment-mp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ deck_id, deck_price, deck_name, user_id, user_email })
      });

      const text = await res.text();
      const data = JSON.parse(text);

      const img = document.createElement('img');
      img.src = `data:image/png;base64,${data.qr_code_base64}`;
      document.getElementById('qrcodepix').appendChild(img);
      alert('Escaneie o QR Code para pagar com PIX!');

      // SÓ AQUI INICIA A VERIFICAÇÃO PERIÓDICA
      startPaymentChecking();
    } catch (err) {
      console.error('Erro ao criar pagamento:', err);
      alert('Erro ao gerar QR Code de pagamento.');
    }
  }

  // Função que inicia a verificação periódica
  function startPaymentChecking() {
    // Limpa qualquer intervalo existente (por segurança)
    if (paymentCheckInterval) {
      clearInterval(paymentCheckInterval);
    }

    // Configura o novo intervalo
    paymentCheckInterval = setInterval(async () => {
      const hasDeck = await checkDeckOwnership();
      if (hasDeck) {
        setupDownloadButton();
        clearInterval(paymentCheckInterval); // Para a verificação
      }
    }, 5000); // Verifica a cada 5 segundos

    // Timeout de segurança (30 minutos)
    setTimeout(() => {
      if (paymentCheckInterval) {
        clearInterval(paymentCheckInterval);
        console.log('Tempo máximo de verificação expirado');
      }
    }, 1800000);
  }

  // Configura o botão inicialmente para compra
  buyButton.addEventListener('click', handleBuyClick);
})();
</script>

{% else %}
  <div class="error">
    <p>Deck não encontrado</p>
    <a href="/">Voltar</a>
  </div>
{% endif %}