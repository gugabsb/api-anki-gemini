const fetch = require('node-fetch');
const { createClient } = require('@supabase/supabase-js');

exports.handler = async (event) => {
  // 1. Validação básica
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: 'Method Not Allowed' };
  }

  // 2. Parse e validação dos dados
  const { deck_id, deck_price, deck_name, user_id, user_email } = JSON.parse(event.body);
  if (!deck_id || !deck_price) {
    return { statusCode: 400, body: 'Dados incompletos' };
  }

  // 3. Configuração do Supabase (se necessário)
  const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_KEY
  );

  try {
    // 4. Chamada à API do Mercado Pago
    const mpResponse = await fetch('https://api.mercadopago.com/v1/payments', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.MP_ACCESS_TOKEN}`
      },
      body: JSON.stringify({
        transaction_amount: Number(deck_price),
        description: `Deck: ${deck_name}`,
        payment_method_id: 'pix',
        payer: {
          email: user_email
        },
        notification_url: `${process.env.URL}/.netlify/functions/webhook-pix`,
        metadata: {
          deck_id,
          user_id,
          source: 'estudecomanki'
        }
      })
    });

    // 5. Tratamento da resposta
    if (!mpResponse.ok) {
      const error = await mpResponse.json();
      throw new Error(`MP API Error: ${error.message}`);
    }

    const pixData = await mpResponse.json();
    const transaction = pixData.point_of_interaction.transaction_data;

    // 6. Registro no Supabase (opcional)
    await supabase
      .from('transactions')
      .insert({
        payment_id: pixData.id,
        user_id: user_id,
        deck_id: deck_id,
        status: 'pending'
      });

    // 7. Retorno formatado
    return {
      statusCode: 200,
      body: JSON.stringify({
        payment_id: pixData.id,
        qr_code: transaction.qr_code,
        qr_code_base64: transaction.qr_code_base64,
        pix_code: transaction.emv,
        expiration: pixData.date_of_expiration
      })
    };

  } catch (error) {
    console.error('Erro no processamento:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        error: 'Falha ao gerar PIX',
        details: error.message
      })
    };
  }
};




const fetch = require('node-fetch');

exports.handler = async (event) => {
  const { deckId, name, price, userId } = JSON.parse(event.body);

  const mpAccessToken = process.env.MP_ACCESS_TOKEN; // defina no painel da Netlify

  const response = await fetch('https://api.mercadopago.com/v1/payments', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${mpAccessToken}`
    },
    body: JSON.stringify({
      transaction_amount: Number(price),
      description: `Compra do deck: ${name}`,
      payment_method_id: 'pix',
      payer: { email: 'comprador@email.com' },
      notification_url: 'https://app.estudecomanki.com.br/.netlify/functions/webhook-pix',
      metadata: { deckId, userId }
    })
  });

  const data = await response.json();

  return {
    statusCode: 200,
    body: JSON.stringify({
      qr_code: data.point_of_interaction.transaction_data.qr_code,
      qr_code_base64: data.point_of_interaction.transaction_data.qr_code_base64
    })
  };
};
